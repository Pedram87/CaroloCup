/*
 * Copyright (c) Christian Berger and Bernhard Rumpe, Rheinisch-Westfaelische Technische Hochschule Aachen, Germany.
 *
 * The Hesperia Framework.
 */

#ifndef HESPERIA_CONFERENCECLIENTMODULETESTSUITE_H_
#define HESPERIA_CONFERENCECLIENTMODULETESTSUITE_H_

#include "cxxtest/TestSuite.h"

#include <sstream>
#include <string>

#include "core/base/Condition.h"
#include "core/base/Lock.h"
#include "core/base/Thread.h"

#include "hesperia/base/ConferenceClientModule.h"
#include "hesperia/dmcp/ModuleConfigurationProvider.h"
#include "hesperia/dmcp/connection/Server.h"
#include "hesperia/dmcp/connection/ConnectionHandler.h"
#include "hesperia/data/dmcp/ModuleDescriptor.h"

using namespace std;
using namespace hesperia::base;
using namespace core::base;
using namespace hesperia::dmcp;
using namespace hesperia::data::dmcp;

class ConferenceClientModuleTestModule : public ConferenceClientModule {
    public:
        ConferenceClientModuleTestModule(int argc, char** argv, Condition& condition) :
                ConferenceClientModule(argc, argv, "ConferenceClientModuleTestModule"),
                correctOrder(true),
                setUpCalled(false),
                tearDownCalled(false),
                bodyCalled(false),
                configurationCorrect(true),
                m_condition(condition) {}

        bool correctOrder;
        bool setUpCalled;
        bool tearDownCalled;
        bool bodyCalled;
        bool configurationCorrect;
        Condition& m_condition;

        virtual void setUp() {
            //TS_ASSERT(false)
            string value1 = getKeyValueConfiguration().getValue<string>("global.config");
            configurationCorrect &= (value1 == "example");

            string value2 = getKeyValueConfiguration().getValue<string>("ConferenceClientModuleTestModule.config1");
            configurationCorrect &= (value2 == "example1");

            string value3 = getKeyValueConfiguration().getValue<string>("ConferenceClientModuleTestModule:ABC.config1");
            configurationCorrect &= (value3 == "example2");

            string value4NotReceived = "";
            try {
                value4NotReceived = getKeyValueConfiguration().getValue<string>("ConferenceClientModuleTestModule:DEF.config1");
                configurationCorrect = false;
            } catch (...) {}

            string value5NotReceived = "";
            try {
                value5NotReceived = getKeyValueConfiguration().getValue<string>("ConferenceClientModuleTestModule2.config2");
                configurationCorrect = false;
            } catch (...) {}

            setUpCalled = true;
            correctOrder &= (setUpCalled && !bodyCalled && !tearDownCalled);
        }

        virtual ModuleState::MODULE_EXITCODE body() {
            bodyCalled = true;
            correctOrder &= (setUpCalled && bodyCalled && !tearDownCalled);
            return ModuleState::OKAY;
        }

        virtual void tearDown() {
            tearDownCalled = true;
            correctOrder &= (setUpCalled && bodyCalled && tearDownCalled);
            Lock l(m_condition);
            m_condition.wakeAll();
        }
};

class ConferenceClientModuleTest : public CxxTest::TestSuite,
                                   public connection::ConnectionHandler,
                                   public ModuleConfigurationProvider
{
    public:
        void testConferenceClientModule() {
            //ServerTCP server(BROADCAST_PORT_SERVER, BROADCAST_PORT_CLIENT);
            connection::Server server(25000, *this);
            server.setConnectionHandler(this);

            string argv0("ConferenceClientModuleTestModule");
            string argv1("--id=ABC");
            string argv2("--cid=10");
            int argc = 3;
            char **argv;
            argv = new char*[argc];
            argv[0] = const_cast<char*>(argv0.c_str());
            argv[1] = const_cast<char*>(argv1.c_str());
            argv[2] = const_cast<char*>(argv2.c_str());

            Condition c;
            ConferenceClientModuleTestModule cmtm(argc, argv, c);
            TS_ASSERT(cmtm.getIdentifier() == "ABC");
            TS_ASSERT( cmtm.runModule() == ModuleState::OKAY );

            Lock l(c);
            if ( cmtm.getModuleState() == ModuleState::RUNNING ) {
                c.waitOnSignal();
            }

            TS_ASSERT(cmtm.correctOrder);
            TS_ASSERT(cmtm.setUpCalled);
            TS_ASSERT(cmtm.bodyCalled);
            TS_ASSERT(cmtm.tearDownCalled);

            // Clean up created modules.
            AbstractModule::getListOfModules().clear();
            delete[] argv;
        }

        virtual KeyValueConfiguration getConfiguration(const ModuleDescriptor& /*md*/) {
            stringstream sstr;
            sstr << "global.config=example" << endl
            << "ConferenceClientModuleTestModule.config1=example1" << endl
            << "ConferenceClientModuleTestModule:ABC.config1=example2" << endl
            << "ConferenceClientModuleTestModule:DEF.config1=example3" << endl
            << "ConferenceClientModuleTestModule2.config2=example4" << endl;

            KeyValueConfiguration kv;
            sstr >> kv;

            return kv;
        }

        virtual void onNewModule(connection::ModuleConnection* mc) {
            delete mc;
        }
};

#endif /*CORE_CONFERENCECLIENTMODULETESTSUITE_H_*/
